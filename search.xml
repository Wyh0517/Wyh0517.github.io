<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>豆瓣电影信息爬取的实现</title>
      <link href="/2020/08/28/doubanTop250/"/>
      <url>/2020/08/28/doubanTop250/</url>
      
        <content type="html"><![CDATA[<p>python爬虫：实现豆瓣电影Top250信息的爬取</p><a id="more"></a><p>导语：疫情在家学习python，琢磨着写一个爬虫程序，实现豆瓣网站的信息爬取，并以Excel表格和SQLite数据库的方式保存，运行效果如下：</p><p><img src="/2020/08/28/doubanTop250/sqlite.png" alt="SQLite"></p><p><img src="/2020/08/28/doubanTop250/excel.png" alt="Excel"></p><p>目录结构</p><p><img src="/2020/08/28/doubanTop250/struct.png" alt="目录结构"></p><h2 id="Python爬虫-实现豆瓣电影Top250信息的爬取"><a href="#Python爬虫-实现豆瓣电影Top250信息的爬取" class="headerlink" title="Python爬虫 实现豆瓣电影Top250信息的爬取"></a>Python爬虫 实现豆瓣电影Top250信息的爬取</h2><p>运行python文件后生成数据库文件和表格文件<br>经过多次调试，已排除全部Bug，python文件具体代码如下:</p><h3 id="1-头文件（自行修改）"><a href="#1-头文件（自行修改）" class="headerlink" title="1.头文件（自行修改）"></a>1.头文件（自行修改）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: dddd/MM/dd hh:mm</span></span><br><span class="line"><span class="comment"># @Author: your name</span></span><br><span class="line"><span class="comment"># @File: spider.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br></pre></td></tr></table></figure><h3 id="2-导入相关类库"><a href="#2-导入相关类库" class="headerlink" title="2.导入相关类库"></a>2.导入相关类库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup    <span class="comment"># 网页解析，获取数据</span></span><br><span class="line"><span class="keyword">import</span> re       <span class="comment"># 正则表达式，进行文字匹配</span></span><br><span class="line"><span class="keyword">import</span> urllib.request,urllib.error      <span class="comment"># 制定URL，获取网页数据</span></span><br><span class="line"><span class="keyword">import</span> xlwt     <span class="comment"># 进行excel操作</span></span><br><span class="line"><span class="keyword">import</span> sqlite3  <span class="comment"># 进行SQLite数据库操作</span></span><br></pre></td></tr></table></figure><h3 id="3-制定正则表达式的规则"><a href="#3-制定正则表达式的规则" class="headerlink" title="3.制定正则表达式的规则"></a>3.制定正则表达式的规则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.获取影片超链接的规则</span></span><br><span class="line">findLink = re.compile(<span class="string">r'&lt;a href="(.*?)"&gt;'</span>)     <span class="comment"># 生成正则表达式对象，表示规则（字符串的模式）</span></span><br><span class="line"><span class="comment"># 2.影片图片</span></span><br><span class="line">findImgSrc = re.compile(<span class="string">r'&lt;img.*src="(.*?)"'</span>,re.S)      <span class="comment"># S忽略换行</span></span><br><span class="line"><span class="comment"># 3.影片片名</span></span><br><span class="line">findTitle = re.compile(<span class="string">r'&lt;span class="title"&gt;(.*)&lt;/span&gt;'</span>)</span><br><span class="line"><span class="comment"># 4.影片评分</span></span><br><span class="line">findRating = re.compile(<span class="string">r'&lt;span class="rating_num" property="v:average"&gt;(.*)&lt;/span&gt;'</span>)</span><br><span class="line"><span class="comment"># 5.影片评价人数</span></span><br><span class="line">findJudge = re.compile(<span class="string">r'&lt;span&gt;(\d*)人评价&lt;/span&gt;'</span>)</span><br><span class="line"><span class="comment"># 6.影片概况</span></span><br><span class="line">findInq = re.compile(<span class="string">r'&lt;span class="inq"&gt;(.*)&lt;/span&gt;'</span>)</span><br><span class="line"><span class="comment"># 7.影片相关信息</span></span><br><span class="line">findBd = re.compile(<span class="string">r'&lt;p class=""&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br></pre></td></tr></table></figure><h3 id="4-主程序功能模块"><a href="#4-主程序功能模块" class="headerlink" title="4.主程序功能模块"></a>4.主程序功能模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Step0.程序执行时</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"开始爬取..."</span>)</span><br><span class="line">    baseurl = <span class="string">"https://movie.douban.com/top250?start="</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step1.爬取网页；Step2.逐一解析数据</span></span><br><span class="line">    datalist = getData(baseurl)</span><br><span class="line"></span><br><span class="line">    savepath = <span class="string">".\\豆瓣电影Top250.xls"</span></span><br><span class="line">    dbpath = <span class="string">"movie.db"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step3.保存数据</span></span><br><span class="line">    saveData(datalist,savepath)     <span class="comment"># 保存数据到Excel</span></span><br><span class="line">    saveData2DB(datalist,dbpath)    <span class="comment"># 保存数据到SQLite</span></span><br></pre></td></tr></table></figure><p>可以实现两种保存方式</p><h3 id="5-爬取网页数据，逐一解析"><a href="#5-爬取网页数据，逐一解析" class="headerlink" title="5.爬取网页数据，逐一解析"></a>5.爬取网页数据，逐一解析</h3><p>tips：爬取网页时，由于是好几个网页，需要逐页解析，否则只会解析最后一页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Step1.爬取网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">(baseurl)</span>:</span></span><br><span class="line">    print(<span class="string">"getData..."</span>)</span><br><span class="line">    datalist = []           <span class="comment"># 创建电影列表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):   <span class="comment"># 调用获取页面信息的函数，10次，25条/页</span></span><br><span class="line">        url = baseurl + str(i*<span class="number">25</span>)</span><br><span class="line">        askURL(url)</span><br><span class="line">        html = askURL(url)  <span class="comment"># 保存获取到的网页源码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step2.逐一解析数据</span></span><br><span class="line">        soup = BeautifulSoup(html,<span class="string">"html.parser"</span>)    <span class="comment"># 对象，解析器</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">'div'</span>,class_=<span class="string">"item"</span>):    <span class="comment"># 查找符合要求的字符串，形成列表</span></span><br><span class="line">            data =[]        <span class="comment"># 保存一部电影的所有信息</span></span><br><span class="line">            item = str(item)</span><br><span class="line">            <span class="comment"># print(item)     # 测试：查看电影Item全部信息</span></span><br><span class="line">            <span class="comment"># break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 1.获取影片超链接</span></span><br><span class="line">            link = re.findall(findLink,item)[<span class="number">0</span>]     <span class="comment"># re库通过正则表达式查找指定的字符串</span></span><br><span class="line">            data.append(link)</span><br><span class="line">            <span class="comment"># 2.影片图片</span></span><br><span class="line">            imgSrc = re.findall(findImgSrc,item)[<span class="number">0</span>]</span><br><span class="line">            data.append(imgSrc)</span><br><span class="line">            <span class="comment"># 3.影片片名</span></span><br><span class="line">            titles = re.findall(findTitle,item)</span><br><span class="line">            <span class="keyword">if</span> len(titles) == <span class="number">2</span>:</span><br><span class="line">                ctitle = titles[<span class="number">0</span>]      <span class="comment"># 添加中文名</span></span><br><span class="line">                data.append(ctitle)</span><br><span class="line">                otitle = titles[<span class="number">1</span>].replace(<span class="string">"/"</span>,<span class="string">""</span>)      <span class="comment"># 去掉无关符号</span></span><br><span class="line">                otitle = re.sub(<span class="string">' '</span>, <span class="string">""</span>, otitle)        <span class="comment"># 替换，去除空格</span></span><br><span class="line">                otitle = re.sub(<span class="string">'( )+'</span>, <span class="string">""</span>, otitle)  <span class="comment"># 替换，去除空格</span></span><br><span class="line">                data.append(otitle)     <span class="comment"># 添加外文名</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(titles[<span class="number">0</span>])</span><br><span class="line">                data.append(<span class="string">' '</span>)        <span class="comment"># 外文名空</span></span><br><span class="line">            <span class="comment"># 4.影片评分</span></span><br><span class="line">            rating = re.findall(findRating,item)[<span class="number">0</span>]</span><br><span class="line">            data.append(rating)</span><br><span class="line">            <span class="comment"># 5.影片评价人数</span></span><br><span class="line">            judgeNum = re.findall(findJudge,item)[<span class="number">0</span>]</span><br><span class="line">            data.append(judgeNum)</span><br><span class="line">            <span class="comment"># 6.影片概况</span></span><br><span class="line">            inq = re.findall(findInq,item)</span><br><span class="line">            <span class="keyword">if</span> len(inq)!=<span class="number">0</span>:</span><br><span class="line">                inq = inq[<span class="number">0</span>].replace(<span class="string">"."</span>,<span class="string">""</span>)</span><br><span class="line">                data.append(inq)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(<span class="string">" "</span>)</span><br><span class="line">            <span class="comment"># 7.影片相关信息</span></span><br><span class="line">            bd = re.findall(findBd, item)[<span class="number">0</span>]</span><br><span class="line">            bd = re.sub(<span class="string">'&lt;br(\s+)?/&gt;'</span>,<span class="string">" "</span>,bd)   <span class="comment"># 替换，去除标签</span></span><br><span class="line">            bd = re.sub(<span class="string">'/'</span>, <span class="string">" "</span>, bd)           <span class="comment"># 替换，去除斜杠</span></span><br><span class="line">            bd = re.sub(<span class="string">' '</span>, <span class="string">""</span>, bd)            <span class="comment"># 替换，去除空格</span></span><br><span class="line">            bd = re.sub(<span class="string">'( )+'</span>,<span class="string">""</span>, bd)       <span class="comment"># 替换，去除空格</span></span><br><span class="line">            data.append(bd.strip())         <span class="comment"># 去空格</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将一部电影信息添加到电影列表</span></span><br><span class="line">            datalist.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(datalist)       # 测试：在控制台打印信息</span></span><br><span class="line">    <span class="keyword">return</span> datalist</span><br></pre></td></tr></table></figure><h3 id="6-获得豆瓣URL内容的方法"><a href="#6-获得豆瓣URL内容的方法" class="headerlink" title="6.获得豆瓣URL内容的方法"></a>6.获得豆瓣URL内容的方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到指定一个URL的网页内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span><span class="params">(url)</span>:</span></span><br><span class="line">    head = &#123;    <span class="comment"># 模拟浏览器头部信息，向服务器发送消息</span></span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64;x64) AppleWebKit / 537.36(KHTML, likeGecko) Chrome / 85.0.4183.76Safari / 537.36Edg / 85.0.564.40"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 用户代理：通过头部伪装，告诉服务器我们的机器类型：是浏览器而不是爬虫（采用字典类型），我们可以接收什么水平的文件内容</span></span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=url,headers=head)</span><br><span class="line">    html = <span class="string">""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib.request.urlopen(request)</span><br><span class="line">        html = response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># 打印网页</span></span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> hasattr(e,<span class="string">"code"</span>):   <span class="comment"># 标签</span></span><br><span class="line">            print(e.code)</span><br><span class="line">        <span class="keyword">if</span> hasattr(e,<span class="string">"reason"</span>):   <span class="comment"># 标签</span></span><br><span class="line">            print(e.reason)</span><br><span class="line">    <span class="keyword">return</span> html</span><br></pre></td></tr></table></figure><h3 id="7-保存数据到Excel"><a href="#7-保存数据到Excel" class="headerlink" title="7.保存数据到Excel"></a>7.保存数据到Excel</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Step3.保存数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveData</span><span class="params">(datalist,savepath)</span>:</span></span><br><span class="line">    print(<span class="string">"saveData..."</span>)</span><br><span class="line">    book = xlwt.Workbook(encoding=<span class="string">"utf-8"</span>,style_compression=<span class="number">0</span>)  <span class="comment"># 创建Workbook对象</span></span><br><span class="line">    sheet = book.add_sheet(<span class="string">'豆瓣电影Top250'</span>,cell_overwrite_ok=<span class="literal">True</span>)  <span class="comment"># 创建工作表</span></span><br><span class="line">    col = (<span class="string">"电影详情链接"</span>,<span class="string">"图片链接"</span>,<span class="string">"影片中文名"</span>,<span class="string">"影片外文名"</span>,<span class="string">"评分"</span>,<span class="string">"评价人数"</span>,<span class="string">"概况"</span>,<span class="string">"相关信息"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">        sheet.write(<span class="number">0</span>,i,col[i])     <span class="comment"># 列名</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">250</span>):</span><br><span class="line">        print(<span class="string">"第%d条"</span>%(i+<span class="number">1</span>))</span><br><span class="line">        data = datalist[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">            sheet.write(i+<span class="number">1</span>,j,data[j])      <span class="comment"># 数据</span></span><br><span class="line"></span><br><span class="line">    book.save(savepath)        <span class="comment"># 保存</span></span><br></pre></td></tr></table></figure><h3 id="8-保存数据到SQLite"><a href="#8-保存数据到SQLite" class="headerlink" title="8.保存数据到SQLite"></a>8.保存数据到SQLite</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveData2DB</span><span class="params">(datalist,dbpath)</span>:</span></span><br><span class="line">    print(<span class="string">"saveData..."</span>)</span><br><span class="line">    init_db(dbpath)           <span class="comment"># 创建数据表</span></span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    cur = conn.cursor()  <span class="comment"># 获取游标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datalist:                       <span class="comment"># 遍历数据表datalist中的数据</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(data)):          <span class="comment"># 遍历每一条数据data中的元素</span></span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">4</span> <span class="keyword">or</span> index == <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            data[index] = <span class="string">'"'</span>+data[index]+<span class="string">'"'</span>   <span class="comment"># 逐一添加双引号</span></span><br><span class="line">        sql = <span class="string">'''</span></span><br><span class="line"><span class="string">            insert into movie250</span></span><br><span class="line"><span class="string">            (info_link,pic_link,cname,ename,score,rated,intro,info)</span></span><br><span class="line"><span class="string">            values(%s);</span></span><br><span class="line"><span class="string">        '''</span>%<span class="string">","</span>.join(data)</span><br><span class="line">        <span class="comment"># 将data列表元素用逗号连接，拼接成sql语句</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(sql)      # sql调试</span></span><br><span class="line"></span><br><span class="line">        cur.execute(sql)    <span class="comment"># 执行sql语句</span></span><br><span class="line">        conn.commit()       <span class="comment"># 提交数据库操作</span></span><br><span class="line">    cur.close()         <span class="comment"># 关闭游标</span></span><br><span class="line">    conn.close()        <span class="comment"># 关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">(dbpath)</span>:</span></span><br><span class="line">    <span class="comment"># 创建数据表</span></span><br><span class="line">    sql = <span class="string">'''</span></span><br><span class="line"><span class="string">        create table movie250</span></span><br><span class="line"><span class="string">            (</span></span><br><span class="line"><span class="string">            id integer primary key autoincrement,</span></span><br><span class="line"><span class="string">            info_link text not null,</span></span><br><span class="line"><span class="string">            pic_link int not null,</span></span><br><span class="line"><span class="string">            cname varchar ,</span></span><br><span class="line"><span class="string">            ename varchar ,</span></span><br><span class="line"><span class="string">            score numeric ,</span></span><br><span class="line"><span class="string">            rated numeric ,</span></span><br><span class="line"><span class="string">            intro text,</span></span><br><span class="line"><span class="string">            info text</span></span><br><span class="line"><span class="string">            );</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    conn = sqlite3.connect(dbpath)  <span class="comment"># 打开或创建数据库文件</span></span><br><span class="line">    print(<span class="string">"数据库连接成功"</span>)</span><br><span class="line"></span><br><span class="line">    c = conn.cursor()   <span class="comment"># 获取游标</span></span><br><span class="line">    c.execute(sql)      <span class="comment"># 执行sql语句</span></span><br><span class="line">    conn.commit()       <span class="comment"># 提交数据库操作</span></span><br><span class="line">    conn.close()        <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    print(<span class="string">"建表成功"</span>)</span><br><span class="line">    print(<span class="string">"数据库关闭"</span>)</span><br></pre></td></tr></table></figure><h3 id="9-主程序入口（必须写）"><a href="#9-主程序入口（必须写）" class="headerlink" title="9.主程序入口（必须写）"></a>9.主程序入口（必须写）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 程序入口（主方法）</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 调用函数</span></span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># init_db("movieTest.db")   # 测试数据库建立</span></span><br><span class="line">    print(<span class="string">"爬取完毕"</span>)</span><br></pre></td></tr></table></figure><p>以上是python文件的全部代码，如有疑问，欢迎关注讨论<br>附：<a href="https://download.csdn.net/download/qq_37756991/12761561" target="_blank" rel="noopener">源码文件</a></p><p><a href="https://wyh0517.github.io/">欢迎访问我的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之禅的翻译与解释</title>
      <link href="/2020/08/22/pythonZen/"/>
      <url>/2020/08/22/pythonZen/</url>
      
        <content type="html"><![CDATA[<p>python： <em>import this</em></p><a id="more"></a><h2 id="《Python之禅》的翻译和解释"><a href="#《Python之禅》的翻译和解释" class="headerlink" title="《Python之禅》的翻译和解释"></a>《Python之禅》的翻译和解释</h2><blockquote><p>凡是用过 Python的人，基本上都知道在交互式解释器中输入 <em>import this</em> 就会显示 Tim Peters 的 The Zen of Python，但它那偈语般的语句有点令人费解，所以我想分享一下我对它的体会，顺带给出我的翻译。</p></blockquote><hr><p><strong>The Zen of Python, by Tim Peters</strong></p><p>Beautiful is better than ugly.</p><p>Explicit is better than implicit.</p><p>Simple is better than complex.</p><p>Complex is better than complicated.</p><p>Flat is better than nested.</p><p>Sparse is better than dense.</p><p>Readability counts.</p><p>Special cases aren’t special enough to break the rules.</p><p>Although practicality beats purity.</p><p>Errors should never pass silently.</p><p>Unless explicitly silenced.</p><p>In the face of ambiguity, refuse the temptation to guess.</p><p>There should be one– and preferably only one –obvious way to do it.</p><p>Although that way may not be obvious at first unless you’re Dutch.</p><p>Now is better than never.</p><p>Although never is often better than <em>right</em> now.</p><p>If the implementation is hard to explain, it’s a bad idea.</p><p>If the implementation is easy to explain, it may be a good idea.</p><p>Namespaces are one honking great idea – let’s do more of those!</p><hr><p><em>翻译和解释</em></p><p><strong>Python之禅 by Tim Peters</strong></p><p>优美胜于丑陋（Python 以编写优美的代码为目标）</p><p>明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</p><p>简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</p><p>复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</p><p>扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</p><p>间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</p><p>可读性很重要（优美的代码是可读的）</p><p>即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</p><p>不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）</p><p>当存在多种可能，不要尝试去猜测</p><p>而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</p><p>虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）</p><p>做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</p><p>如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</p><p>命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博客文章的利器-Markdown</title>
      <link href="/2020/08/13/markdown/"/>
      <url>/2020/08/13/markdown/</url>
      
        <content type="html"><![CDATA[<p>Markdown使用详解</p><a id="more"></a><p>一级标题：#一级标题</p><p>二级标题：##二级标题</p><p>三级标题：###三级标题</p><p>分隔符：—</p><p>插入网址：[显示的文字]+(URL链接)</p><p>插入图片</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置文件</title>
      <link href="/2020/08/12/SpringBoot02/"/>
      <url>/2020/08/12/SpringBoot02/</url>
      
        <content type="html"><![CDATA[<p>Episode2：SpringBoot相关配置</p><a id="more"></a><h1 id="第二章、Spring-Boot-配置文件"><a href="#第二章、Spring-Boot-配置文件" class="headerlink" title="第二章、Spring Boot 配置文件"></a>第二章、Spring Boot 配置文件</h1><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>配置文件</li><li>YAML语法</li></ul><hr><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局文件，文件名固定；</p><p>配置文件放在<strong>src/main/resources</strong>目录或者<strong>类路径/config</strong>下</p><ul><li>application.properties</li><li>application.yml</li></ul><p>作用：修改SpringBoot自动配置默认值（在底层以自动配置好）</p><p>YAML（YAML Ain‘t  Markup Language）</p><blockquote><p>YAML A Markup Language：是一个标记语言</p></blockquote><blockquote><p>YAML isn‘t  Markup Language：不是标记语言</p></blockquote><p>标记语言</p><blockquote><p>以前的配置文件，大多是<strong>XXXX.xml</strong>文件；</p><p>YAML：以<strong>数据</strong>为中心，比json、xml更适合做配置文件；</p></blockquote><p>XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.port=8080或</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h2 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><p>k:(空格)v：表示一对键值对（必须有空格）</p><p>以空格缩进来控制层级关系；左对齐即为同级</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性值大小写敏感</p><h3 id="2-2-值的写法"><a href="#2-2-值的写法" class="headerlink" title="2.2 值的写法"></a>2.2 值的写法</h3><h4 id="1-字面量：普通的值（数字，字符串，布尔）"><a href="#1-字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="(1)字面量：普通的值（数字，字符串，布尔）"></a>(1)字面量：普通的值（数字，字符串，布尔）</h4><ul><li><p>k: v：字面直接来写；字符串默认不加引号；</p><ul><li><p>“”：双引号：特殊字符不转义，表达自身的意思，如换行</p><p>name: “zhangsan \n lisi” <em>输出为</em> zhangsan （换行） lisi</p></li><li><p>’‘：单引号：特殊字符转义，表示一个普通的字符数据</p><p>name: ’zhangsan \n lisi‘ <em>输出为</em> zhangsan \n lisi</p></li></ul></li></ul><h4 id="2-对象（属性和值、键值对）："><a href="#2-对象（属性和值、键值对）：" class="headerlink" title="(2)对象（属性和值、键值对）："></a>(2)对象（属性和值、键值对）：</h4><ul><li><p>k: v：在下一行来写对象的属性和值的关系，注意缩进</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></li><li><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastname:</span> <span class="string">zhangsan,age:</span> <span class="number">20</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-数组（List、set）"><a href="#3-数组（List、set）" class="headerlink" title="(3)数组（List、set）"></a>(3)数组（List、set）</h4><ul><li><p>用 - 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure></li><li><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-配置文件值注入"><a href="#2-3-配置文件值注入" class="headerlink" title="2.3 配置文件值注入"></a>2.3 配置文件值注入</h3><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">lastname:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2020</span><span class="string">/10/10</span></span><br><span class="line">  <span class="attr">maps:</span> <span class="string">&#123;K1:</span> <span class="string">v1,K2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">wangwu</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaogou</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>javaBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值都映射到组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的，才能用这个功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//将本类所有的属性和配置文件相关配置绑定</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastname;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置就有提示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件绑定就会有提示--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring动态框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> maven </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot入门</title>
      <link href="/2020/08/10/SpringBoot/"/>
      <url>/2020/08/10/SpringBoot/</url>
      
        <content type="html"><![CDATA[<p>Episode1：SpringBoot创建Maven项目</p><a id="more"></a><h1 id="第一章、Spring-Boot-入门"><a href="#第一章、Spring-Boot-入门" class="headerlink" title="第一章、Spring Boot 入门"></a>第一章、Spring Boot 入门</h1><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>Spring简介</li><li>微服务</li><li>环境约束</li><li>项目实战与回溯</li><li>快速创建</li></ul><hr><h2 id="1、Spring简介"><a href="#1、Spring简介" class="headerlink" title="1、Spring简介"></a>1、Spring简介</h2><p>简化Spring应用开发的一个框架</p><p>整个Spring技术栈的一个大整合</p><p>J2EE开发的一站式解决方案</p><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014年，<a href="https://martinfowler.com/" target="_blank" rel="noopener">martin fowler</a></p><blockquote><p>微服务是一种架构风格（服务微化）</p><p>一个应用应该是一组小型服务 ；可以通过HTTP方式进行互通；</p></blockquote><p>单体应用：ALL IN ONE；</p><p><img src="/2020/08/10/SpringBoot/singleApp.png" alt></p><p>微服务：Microservices</p><blockquote><p>每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p></blockquote><p><img src="/2020/08/10/SpringBoot/microServer.png" alt></p><p><a href="https://spring.io/" target="_blank" rel="noopener">详情参照微服务文档</a></p><h2 id="3、环境约束"><a href="#3、环境约束" class="headerlink" title="3、环境约束"></a>3、环境约束</h2><p>-jdk1.8：Spring Boot 1.7及以上；</p><p>-maven3.x：maven3.3以上；</p><p>-Intellij IDEA 2017，或STS；</p><p>-SpringBoot 1.5.9.RELEASE；</p><h3 id="3-1-MAVEN设置"><a href="#3-1-MAVEN设置" class="headerlink" title="3.1 MAVEN设置"></a>3.1 MAVEN设置</h3><p>给maven的settings.xml配置文件中，profiles标签添加代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;profile&gt;</span><br><span class="line">&lt;id&gt;jdk-1.8&lt;/id&gt;</span><br><span class="line">&lt;activation&gt;</span><br><span class="line">&lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">&lt;jdk&gt;1.8&lt;/jdk&gt;</span><br><span class="line">&lt;/activation&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;/profile&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-IDEA设置"><a href="#3-2-IDEA设置" class="headerlink" title="3.2 IDEA设置"></a>3.2 IDEA设置</h3><p>Configer-Settings-Build-Maven</p><h2 id="4、第一个项目：SpringBootHelloWorld"><a href="#4、第一个项目：SpringBootHelloWorld" class="headerlink" title="4、第一个项目：SpringBootHelloWorld"></a>4、第一个项目：SpringBootHelloWorld</h2><p>浏览器请求-服务器响应</p><h3 id="4-1-创建一个Maven工程；（jar）"><a href="#4-1-创建一个Maven工程；（jar）" class="headerlink" title="4.1 创建一个Maven工程；（jar）"></a>4.1 创建一个Maven工程；（jar）</h3><blockquote><p>务必选择自动导入（enable Auto Import）的方式，以便以后在pom文件写依赖时自动导入</p></blockquote><h3 id="4-2-SpringBoot导入相关依赖"><a href="#4-2-SpringBoot导入相关依赖" class="headerlink" title="4.2 SpringBoot导入相关依赖"></a>4.2 SpringBoot导入相关依赖</h3><h4 id="1-编辑pom-xml文件"><a href="#1-编辑pom-xml文件" class="headerlink" title="(1)编辑pom.xml文件"></a>(1)编辑<code>pom.xml</code>文件</h4><p>插入以下代码（pom文件是用于构建项目的配方，导入父项目）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-添加类路径依赖项"><a href="#2-添加类路径依赖项" class="headerlink" title="(2)添加类路径依赖项"></a>(2)添加类路径依赖项</h4><p>要添加必要的依赖项，请编辑<code>pom.xml</code>并在<code>parent</code>部分下方添加<code>spring-boot-starter-web</code>依赖项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等待External自动导入相关依赖jar包</p><h3 id="4-3-编写一个主程序"><a href="#4-3-编写一个主程序" class="headerlink" title="4.3 编写一个主程序"></a>4.3 编写一个主程序</h3><p>启动SpringBoot应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类说明这是一个SpringBoot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动Spring应用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-编写相关的Controller、Servise"><a href="#4-4-编写相关的Controller、Servise" class="headerlink" title="4.4 编写相关的Controller、Servise"></a>4.4 编写相关的Controller、Servise</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/Hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-运行主程序测试"><a href="#4-5-运行主程序测试" class="headerlink" title="4.5 运行主程序测试"></a>4.5 运行主程序测试</h3><h3 id="4-6-简化部署"><a href="#4-6-简化部署" class="headerlink" title="4.6 简化部署"></a>4.6 简化部署</h3><p>将这个应用打成jar包，直接使用<code>java -jar</code>的命令执行；（无需tomcat）</p><p>编辑<code>pom.xml</code>文件，安装插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在侧边选择 <em>maven-package</em> 生成jar包，直接使用 <code>java -jar 名字</code> 的命令执行（tab提示）</p><p>参考手册：<a href="https://www.springcloud.cc/spring-boot.html" target="_blank" rel="noopener">SpringBoot中文文档</a></p><h2 id="5、Hello-World-探究"><a href="#5、Hello-World-探究" class="headerlink" title="5、Hello World 探究"></a>5、Hello World 探究</h2><h3 id="5-1-POM文件"><a href="#5-1-POM文件" class="headerlink" title="5.1 POM文件"></a>5.1 POM文件</h3><h4 id="1-父项目"><a href="#1-父项目" class="headerlink" title="(1)父项目"></a>(1)父项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">这是真正管理SpringBoot应用的所有依赖版本；</span><br></pre></td></tr></table></figure><p>SpringBoot的版本依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h4 id="2-启动器（导入依赖）"><a href="#2-启动器（导入依赖）" class="headerlink" title="(2)启动器（导入依赖）"></a>(2)启动器（导入依赖）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-web</p><p>spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件</p><p>Springboot将所有场景都抽取出来，做成一个个starters（启动器），只需在项目里引入这些</p><p>starters相关场景的所有依赖都会导入进来，需要什么功能就导入什么场景的启动器</p><h3 id="5-2-主程序类"><a href="#5-2-主程序类" class="headerlink" title="5.2 主程序类"></a>5.2 主程序类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类说明这是一个SpringBoot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动Spring应用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SpringBootApplication（自动配置底层原理）</p><h2 id="6、使用SpringInitializer快速创建SpringBoot项目"><a href="#6、使用SpringInitializer快速创建SpringBoot项目" class="headerlink" title="6、使用SpringInitializer快速创建SpringBoot项目"></a>6、使用SpringInitializer快速创建SpringBoot项目</h2><p>IDEA支持使用Spring项目创建向导快速创建一个SpringBoot项目；</p><p>不选择Maven选择Spring Initializr</p><p><img src="/2020/08/10/SpringBoot/Initializr01.png" alt></p><p>选择需要的模块；向导会联网创建SpringBoot项目；</p><p><img src="/2020/08/10/SpringBoot/Initializr02.png" alt></p><p>默认生成的SpringBoot项目：</p><ul><li>主程序写好，只需要自己的逻辑</li><li>resources文件夹目录结构<ul><li>static：所有静态资源，如js、css、images；</li><li>templates：保存所有模板页面（默认jar包使用嵌入式Tomcat，不支持JSP页面）；可以使用引擎模板（freemarker、thymeleaf）；</li><li>application.properties：应用配置文件，可以修改默认配置<code>server.port = 8081</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring动态框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> maven </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL必知必会</title>
      <link href="/2020/07/23/sql-command/"/>
      <url>/2020/07/23/sql-command/</url>
      
        <content type="html"><![CDATA[<p>MySQL数据库常用命令</p><a id="more"></a><h2 id="一、数据库使用"><a href="#一、数据库使用" class="headerlink" title="一、数据库使用"></a>一、数据库使用</h2><p>1、连接</p><p>2、选择数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br><span class="line">use 数据库名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github项目部署</title>
      <link href="/2020/06/25/gitPush/"/>
      <url>/2020/06/25/gitPush/</url>
      
        <content type="html"><![CDATA[<p>如何把一个项目部署到github</p><a id="more"></a><h3 id="1-创建本地项目"><a href="#1-创建本地项目" class="headerlink" title="1.创建本地项目"></a>1.创建本地项目</h3><p>在桌面上创建一个文件夹（或者<code>mkdir</code>一个文件），将代码拷贝到该文件夹。<br><img src="/2020/06/25/gitPush/structure.jpg" alt></p><h3 id="2-将当前项目转化为工作区"><a href="#2-将当前项目转化为工作区" class="headerlink" title="2.将当前项目转化为工作区"></a>2.将当前项目转化为工作区</h3><p>打开该文件，鼠标右击进入<code>Git Bash Here</code><br>通过命令<code>git init</code>把这个文件夹变成Git可管理的仓库。</p><h3 id="3-将项目部署到Git本地仓库"><a href="#3-将项目部署到Git本地仓库" class="headerlink" title="3.将项目部署到Git本地仓库"></a>3.将项目部署到Git本地仓库</h3><p>通过git add把项目添加到仓库（或<code>git add .</code>把该目录下的所有文件添加到仓库，注意点是用空格隔开的）在这个过程中你其实可以一直使用<code>git status</code>来查看你当前的状态。</p><h3 id="4-将项目推送到远程仓库（Gitgub）"><a href="#4-将项目推送到远程仓库（Gitgub）" class="headerlink" title="4.将项目推送到远程仓库（Gitgub）"></a>4.将项目推送到远程仓库（Gitgub）</h3><p>用<code>git commit -m &quot;日志&quot;</code>将本地暂存的修改提交到版本库,<br><code>git remote add origin (仓库地址)</code>把项目提交到仓库。</p><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>错误：</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">! [rejected] master -&gt; master (fetch first) error: failed <span class="keyword">to</span> push some refs <span class="keyword">to</span> <span class="symbol">'git</span>@gitee.co</span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.先输入git pull --rebase origin <span class="literal">master</span></span><br><span class="line"><span class="number">2</span>.在输入git push origin <span class="literal">master</span></span><br></pre></td></tr></table></figure><p>如果还不行，出现<code>push declined due to email privacy restrictions</code>则删除readme</p>]]></content>
      
      
      <categories>
          
          <category> Git与Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的系统命令</title>
      <link href="/2020/06/25/linux-command/"/>
      <url>/2020/06/25/linux-command/</url>
      
        <content type="html"><![CDATA[<p>Windows/Linux shell(cmd) 语法（附：常用快捷键）</p><a id="more"></a><ol><li>创建目录：<code>mkdir</code></li><li>进入目录：<code>cd</code></li><li>删除：</li></ol><h3 id="附：URL界面快捷键"><a href="#附：URL界面快捷键" class="headerlink" title="附：URL界面快捷键"></a>附：URL界面快捷键</h3><ol><li>ctrl-w：关闭当前窗口</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章的front-matter使用详解</title>
      <link href="/2020/06/24/rule/"/>
      <url>/2020/06/24/rule/</url>
      
        <content type="html"><![CDATA[<p>个人博客头部标签</p><a id="more"></a><h2 id="一、front-matter包含的内容"><a href="#一、front-matter包含的内容" class="headerlink" title="一、front-matter包含的内容"></a>一、front-matter包含的内容</h2><p><strong>参数描述默认值</strong></p><p>基础</p><p><code>title</code>标题</p><p><code>date</code>建立日期文件建立日期</p><p><code>tags</code>标签（不适用于分页）</p><p><code>categories</code>分类（不适用于分页）</p><p>进阶</p><p><code>subtitle</code></p><p><code>layout</code>布局</p><p><code>author</code>作者名字</p><p><code>updated</code>更新日期文件更新日期</p><p><code>comments</code>开启文章的评论功能true</p><p><code>permalink</code>覆盖文章网址</p><p><code>keywords</code>仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</p><p><code>summary</code>自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</p><p><code>img</code>文章的显示的时候的背景</p><p><code>coverImg</code></p><p><code>cover: true</code></p><p><code>password</code></p><p><code>mathjax: true</code></p><p><code>top:true</code></p><h2 id="二、什么是front-matter"><a href="#二、什么是front-matter" class="headerlink" title="二、什么是front-matter"></a>二、什么是front-matter</h2><ol start="2"><li>就是.md文件最上面的这部分内容</li><li>-–<br>title: tags<br>date: 2019-08-13 09:39:50<br>type: tags<br>layout: tag<br>-–</li></ol><h2 id="三、标签详解（只讲解官方文档中说的模糊的）"><a href="#三、标签详解（只讲解官方文档中说的模糊的）" class="headerlink" title="三、标签详解（只讲解官方文档中说的模糊的）"></a>三、标签详解（只讲解官方文档中说的模糊的）</h2><ol><li><strong>layout</strong>：</li></ol><ul><li>作用：指定要使用的模版样式</li><li>例如我上面的例子中使用的<code>tag</code>模版</li><li>如果不指定这个将会使用<code>根目录/_config.yml</code>中的默认配置<code>default_layout: post</code></li></ul><ol><li><strong>tags</strong>：</li></ol><ul><li>作用：给文章添加标签，使其能在标签页中显示</li><li>如何使用：</li><li>tags:<br>- PS3<br>- Games</li><li>也可以[Github,Git,node.js]</li><li>如上所示一篇文章可以设置多个标签</li></ul><ol><li><strong>categories</strong>：</li></ol><ul><li>整体内容基本与 <code>tags</code> 一致</li><li>区别在于在进行分类管理的时候此标签下的内容是<code>有严格的顺序和层次</code>的，tags没有</li><li>categories:<br>- Diary<br>因为hexo的分类具有层次关系，同一文章不能同时存在两个同级分类中，所以下面这种方式<br>categories:<br>- Diary<br>- Life<br>会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</li></ul><ol><li><strong>permalink</strong>：</li></ol><ul><li>直白的说就是静态文件的存放地址</li><li>如果不指定这个将会使用<code>根目录/_config.yml</code>中的默认配置<code>permalink: :year/:month/:day/:title/</code></li><li>如果指定的文件夹不存在就会创建一个</li><li>你如何设置最后在页面中使用的连接地址就会是什么样的，例如上面这种方式最终生成的文章的连接地址就是<code>xxx.github.io/2019/08/11/：title/</code></li></ul><ol><li><strong>keywords</strong></li></ol><ul><li>用于SEO优化</li><li>你这篇文章包含哪些关键词</li><li>人家百度这些关键词的时候可能就会显示你的页面</li></ul><hr><h2 id="拓展：当前的主题中没有分类页和标签页怎么办"><a href="#拓展：当前的主题中没有分类页和标签页怎么办" class="headerlink" title="拓展：当前的主题中没有分类页和标签页怎么办"></a><strong>拓展：当前的主题中没有分类页和标签页怎么办</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个问题困扰了我一段时间，网上也没有比较好的答案所以现在写出来，给大家。</span><br></pre></td></tr></table></figure><p><strong>tags创建步骤</strong><br>根据你的配置创建文件夹，在我的配置中<code>（根目录/_config.yml）</code>设置的标签根目录为<code>tag_dir: tags</code>，所以我新建额是tags目录，你可以根据你的情况处理。</p><p>1.创建tags文件夹，在命令行中输入：<br>​<br>hexo new page “tags”</p><p>2.找到新建的文件夹<code>\source\tags</code>下的index.md文件，修改其<code>front-matter</code>为如下格式<br>-–<br>title: tags<br>date: 2019-08-13 09:39:50<br>type: tags // 帮助脚本识别这是一个用来创建tags的文档<br>layout: tag // 我的tags模版标签叫tag你可以根据你的模版名称输入对应的名称<br>-–</p><p>3.生成静态文件<br>hexo g</p><p>4.通过主题设置<code>/themes/你的主题名称/_config.yml</code>中的配置，在页面指定一个连接指向<code>tags</code>文件夹，就可以在页面中看到标签页了<br>menu:<br># Project:<br># path: /categories/Projects<br># card: project-card<br># Stuffs:<br># path: /tags/Stuffs<br># card: article-card<br>Home: /<br>tags: /tags</p><p><strong>categories创建步骤</strong><br>与tags步骤一致我就不再赘述。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Hexo框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生哲理</title>
      <link href="/2020/05/17/article/"/>
      <url>/2020/05/17/article/</url>
      
        <content type="html"><![CDATA[<p>不忘初心</p><a id="more"></a><blockquote><p><strong>初心</strong></p><p>不要因为走得太远，而忘了我们为什么出发。</p></blockquote><p>1、交朋友的标准是什么：</p><p>答：出世的智者，入世的强者，正常而阳光的普通人</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客的搭建-下</title>
      <link href="/2020/04/08/usehexo2/"/>
      <url>/2020/04/08/usehexo2/</url>
      
        <content type="html"><![CDATA[<p>Hexo相关配置</p><a id="more"></a><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>更换主题</li><li>其他配置</li><li>常见命令汇总</li><li>选项</li></ul><hr><h2 id="1、更换主题"><a href="#1、更换主题" class="headerlink" title="1、更换主题"></a>1、更换主题</h2><p>Hexo 博客框架自带主题 <em>Landscape</em>，更换主题需进入<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题商店</a>自行下载；</p><p>这里以<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>主题为例；<br>1.进入themes目录，下载主题，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>2.设置主题，修改根目录的 <em>config.iml</em> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia-plus</span><br><span class="line">//使用的主题，默认为landscape</span><br></pre></td></tr></table></figure><p>3.更新博客，依次执行<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>，最后执行<code>hexo d</code></p><p>具体参考<a href="https://www.jianshu.com/p/a2d298e26dcd" target="_blank" rel="noopener">Hexo 最常用的几个命令</a>，也可以查阅<a href="https://alpha-gogo.github.io/2020/03/14/hello-world/" target="_blank" rel="noopener">基本命令</a>。</p><p><img src="/2020/04/08/usehexo2/hexo.jpg" alt></p><p>全新主题</p><p>4.附件：<a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">流程回顾</a></p><h2 id="2、其他配置"><a href="#2、其他配置" class="headerlink" title="2、其他配置"></a>2、其他配置</h2><p>详情参阅<a href="https://wyh0517.github.io/2020/04/09/hexoLog/">Hexo开发日志</a></p><h2 id="3、常用命令汇总"><a href="#3、常用命令汇总" class="headerlink" title="3、常用命令汇总"></a>3、常用命令汇总</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建文章</span></span><br><span class="line">hexo n</span><br><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 生成静态页面+部署</span></span><br><span class="line">hexo d -g<span class="comment"># 等同：hexo g &amp;&amp; hexo d</span></span><br><span class="line"><span class="comment"># 生成静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">hexo d</span><br><span class="line"><span class="comment"># 启动服务器预览</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>建站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装hexo</span></span><br><span class="line">npm install hexo -g</span><br><span class="line"><span class="comment"># 升级hexo</span></span><br><span class="line">npm update hexo -g</span><br><span class="line"><span class="comment"># hexo初始化</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment"># 查看node.js版本号</span></span><br><span class="line">node -v</span><br><span class="line"><span class="comment"># 查看npm版本号</span></span><br><span class="line">npm -v</span><br><span class="line"><span class="comment"># 查看git版本号</span></span><br><span class="line">git --version</span><br><span class="line"><span class="comment"># 查看hexo版本号</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>插件安装和卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">npm install hexo-xxx-xxx --save</span><br><span class="line"><span class="comment"># 卸载插件</span></span><br><span class="line">npm uninstall hexo-xxx-xxx --save</span><br></pre></td></tr></table></figure><p>指令</p><table><thead><tr><th>指令</th><th>简写</th><th align="left">描述</th></tr></thead><tbody><tr><td>hexo new</td><td>hexo n</td><td align="left">新建文章</td></tr><tr><td>hexo generate</td><td>hexo g</td><td align="left">生成静态文件</td></tr><tr><td>hexo deploy</td><td>hexo d</td><td align="left">部署</td></tr><tr><td>hexo server</td><td>hexo s</td><td align="left">启动服务预览</td></tr><tr><td>hexo publish</td><td>hexo p</td><td align="left">发表草稿</td></tr></tbody></table><p><strong>注: <code>hexo clean</code> 没有简写, <code>git --version</code> 没有简写</strong></p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建一个网站</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init [folder]</span></span><br></pre></td></tr></table></figure><p>如果没有设置<code>folder</code>，Hexo默认在<strong>当前文件夹</strong>建立网站</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建一篇文章,文章名称和标题为 [title],文章采用 [layout] 布局</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure><p>会在目录<code>source/_posts</code>下生成 [title].md 文件，[title].md文件的顶部会使用<code>---</code>分割区域，也称作<strong>Front matter</strong>区<br>如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替（一般默认是<code>post</code>）。<br>如果标题包含空格的话，请使用<strong>引号</strong>括起来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> eg</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new <span class="string">"post title with whitespace"</span></span></span><br></pre></td></tr></table></figure><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成静态文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动</td></tr></tbody></table><p>执行 <code>$ hexo g</code>后会在站点根目录下生成<code>public</code>文件夹, hexo会将<code>/blog/source/</code>下面的<code>.md</code>后缀的文件编译为<code>.html后</code>缀的文件,存放在<code>/blog/public/</code>路径下</p><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 发表草稿</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo publish [layout] &lt;filename&gt;</span></span><br></pre></td></tr></table></figure><p><code>hexo publish [layout] &lt;title&gt;</code> 通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹<br>如:<code>$ hexo publish [layout] &lt;title&gt;</code>，草稿默认是不会显示在页面中的，可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动服务器（常用于调试）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br></pre></td></tr></table></figure><p>默认情况下，访问网址为： <code>http://localhost:4000/</code>。Hexo 会监视文件变动并自动更新，除修改<strong>站点配置文件</strong>外,无须重启服务器,直接刷新网页即可生效。</p><table><thead><tr><th>选项</th><th>描述</th><th>eg</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设端口</td><td>hexo s -p 5000</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td><td></td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td><td></td></tr><tr><td><code>-i</code></td><td>自定义IP</td><td>hexo s -i 192.168.1.1</td></tr></tbody></table><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部署网站,将本地数据部署到远端服务器(如github、coding)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 渲染文件</span></span><br><span class="line">$ hexo render <span class="params">&lt;file1&gt;</span> [file2] ...</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output</code></td><td>设置输出路径</td></tr></tbody></table><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo migrate &lt;<span class="built_in">type</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">迁移内容</a>。</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除缓存,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出网站资料</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo list &lt;<span class="built_in">type</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示 Hexo 版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo version</span></span><br></pre></td></tr></table></figure><h2 id="4、选项"><a href="#4、选项" class="headerlink" title="4、选项"></a>4、选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo --safe</span></span><br></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="comment">--debug</span></span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="noopener">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="comment">--silent</span></span><br></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="comment">--config custom.yml</span></span><br></pre></td></tr></table></figure><p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p><p>总结</p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><blockquote><p>欢迎来到<strong>Hexo</strong>！这是您的第一篇文章。查看<strong>文档</strong>以获取更多信息。如果在使用Hexo时遇到任何问题，可以在<strong>故障排除</strong>中找到答案，或者可以在<strong>GitHub</strong>上向我询问。</p></blockquote><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>Create a new(创建) post</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">//hexo n</span><br></pre></td></tr></table></figure><p>Run server(本地端运行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">//hexo s</span><br></pre></td></tr></table></figure><p>Generate(生成) static files</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">//hexo g</span><br></pre></td></tr></table></figure><p>Deploy(部署到远端) to remote sites</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">//hexo d</span><br></pre></td></tr></table></figure><h3 id="More-info"><a href="#More-info" class="headerlink" title="More info"></a>More info</h3><p>Create a new post: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a><br>Run server: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a><br>Generate static files: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a><br>Deploy to remote sites: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>删除文章</p><p>目前未找到删除文章的指令，可以到目录/source/_posts下删除相应的文章，然后重新生成部署即可</p><ol><li>到目录/source/_posts下删除相应的文章</li><li>$ hexo g</li><li>$ hexo d</li></ol>]]></content>
      
      
      <categories>
          
          <category> 静态框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客的搭建-上</title>
      <link href="/2020/04/07/useHexo/"/>
      <url>/2020/04/07/useHexo/</url>
      
        <content type="html"><![CDATA[<p>Hexo搭建和部署</p><a id="more"></a><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>安装Node.js</li><li>安装Hexo博客框架</li><li>使用Hexo框架搭建个人博客</li><li>部署到Github</li></ul><hr><h2 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js</h2><p>Node.js是搭建Hexo博客所必需的环境。在<a href="https://nodejs.org" target="_blank" rel="noopener">Node.js</a>官网上下载LTS版本的安装包，一直按下一步安装即可。</p><p>使用管理员权限打开终端，执行<code>node -v</code>和<code>npm -v</code>命令，可以查看node和相应包管理器的版本。</p><h2 id="2、安装Hexo博客框架"><a href="#2、安装Hexo博客框架" class="headerlink" title="2、安装Hexo博客框架"></a>2、安装Hexo博客框架</h2><p>因为谷歌安装插件是从国外服务器下载，受网络影响大，可能出现异常，所以使用之前，先执行以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>至于这段代码的作用，这里有一段<a href="http://npm.taobao.org" target="_blank" rel="noopener">淘宝团队</a>官网的引述：</p><blockquote><p>“这是一个完整npmjs.org镜像，你可以用此代替官方版本（只读），同步频率目前为10分钟一次以保证尽量与官方服务同步“。</p></blockquote><p>自动安装完成后，执行<code>cnpm -v</code>命令查看淘宝镜像版本。接下来安装Hexo框架，执行以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>执行<code>hexo -v</code>可查看Hexo框架的版本。</p><h2 id="3、使用Hexo框架搭建个人博客"><a href="#3、使用Hexo框架搭建个人博客" class="headerlink" title="3、使用Hexo框架搭建个人博客"></a>3、使用Hexo框架搭建个人博客</h2><h3 id="3-1-初始化"><a href="#3-1-初始化" class="headerlink" title="3.1 初始化"></a>3.1 初始化</h3><p>1.建立blog文件夹，作为博客生成的根目录。使用终端进入目录将博客初始化，需执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>2.等待一段时间后完成安装，Blog目录下会生成一些内容，其中包含自带的默认主题<strong>landscape</strong>。运行博客，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>会生成一个<strong>localhost</strong>端口号，将地址复制到浏览器打开连接，这样就实现了在本地端运行博客网站。</p><p>3.执行以下命令创建一个新的博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"newText"</span></span><br></pre></td></tr></table></figure><p>在根目录的 <strong>source/_post</strong> 目录下生成了一个 <em>.md</em> 文件，这就是刚刚创建的博客。使用 <a href="https://editor.csdn.net/md/" target="_blank" rel="noopener">markdown</a> 编写博客会事半功倍。</p><p>编写完博客后保存文件，在终端执行命令退回到根目录。</p><p>注意：若要添加图片，需创建同名文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n newText</span><br></pre></td></tr></table></figure><p>实现在post目录下同时创建 <strong>newText.md</strong> 文件和 <strong>newText</strong> 文件夹（目录），将图片放入文件夹即可。显示图片操作请访问<a href="http://localhost:4000/2020/08/13/markdown/" target="_blank" rel="noopener">详情</a></p><p>4.完成博客的清理、生成，执行以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>执行<code>hexo s</code>查看博客的效果，刷新浏览器页面，新的博客就生成了。</p><h2 id="4、部署到Github"><a href="#4、部署到Github" class="headerlink" title="4、部署到Github"></a>4、部署到Github</h2><p>真正的博客应该公开到网上，接下来将个人博客部署到Github上。</p><p>1.在Github上新建一个仓库，取名格式”<em>昵称.github.io</em>“，(必须是这个格式，它将作为个人博客的地址)</p><p>2.在部署博客之前，需安装Git插件，在终端执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>3.配置根目录下的<strong>config.yml</strong>文件，修改以下代码区域：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: <span class="comment">#你的仓库地址</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>4.配置完成，执行以下命令将博客部署到远端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>过程中可能会需要输入Github的账户和密码，推送过程会持续一段时间。</p><p>5.推送完成后，Github仓库会发生一些变化，个人博客搭建成功。复制链接(之前的仓库名)在浏览器中打开，这就实现了在公网上搭建自己的博客网站。</p><h2 id="详情参阅"><a href="#详情参阅" class="headerlink" title="详情参阅"></a>详情参阅</h2><p><a href="https://wyh0517.github.io/">我的博客地址</a><br><a href="https://github.com/Wyh0517/Wyh0517.github.io" target="_blank" rel="noopener">我的Git仓库地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 静态框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的资料</title>
      <link href="/2020/03/18/aboutMe/"/>
      <url>/2020/03/18/aboutMe/</url>
      
        <content type="html"><![CDATA[<p>我的资料</p><a id="more"></a><p><img src="/2020/03/18/aboutMe/mugshot.jpg" alt></p><h3 id="我的账户信息"><a href="#我的账户信息" class="headerlink" title="我的账户信息"></a>我的账户信息</h3><p>QQ: 1537992316</p><p>手机(微信): 13080843840</p><p>邮箱: <a href="mailto:1537992316@qq.com">1537992316@qq.com</a></p><p><a href="https://github.com/Wyh0517" target="_blank" rel="noopener">Github</a>    <a href="https://gitee.com/wyh0517" target="_blank" rel="noopener">码云</a>    <a href="https://www.jianshu.com/u/75c025f6cc14" target="_blank" rel="noopener">简书</a>    <a href="https://www.cnblogs.com/qq1537992316/" target="_blank" rel="noopener">博客园</a>    <a href="https://blog.csdn.net/qq_37756991" target="_blank" rel="noopener">CSDN</a><br><a href="https://leetcode-cn.com/u/ahian-wang/" target="_blank" rel="noopener">leetcode</a>    <a href="https://www.zhihu.com/people/mariowilde" target="_blank" rel="noopener">知乎</a>    <a href="https://weibo.com/u/5773013283" target="_blank" rel="noopener">微博</a><br><a href="https://space.bilibili.com/96204768" target="_blank" rel="noopener">Bilibili</a>    <a href="https://music.163.com/#/user/home?id=338305486" target="_blank" rel="noopener">网易云音乐</a>    <a href="https://user.qzone.qq.com/1537992316/infocenter" target="_blank" rel="noopener">QQ空间</a></p><h3 id="技能掌握情况"><a href="#技能掌握情况" class="headerlink" title="技能掌握情况"></a>技能掌握情况</h3><p>基础语言：C、C++、C#</p><p>后台：Java、Python、MySQL、mongo、异步调用、golang</p><p>前端：HTML、CSS、JS、ts技术、数据流转、计算机网络、vue react</p><p>通用：算法、数据结构、操作系统、AI、大数据分析</p><h3 id="使用的云工具"><a href="#使用的云工具" class="headerlink" title="使用的云工具"></a>使用的云工具</h3><p>有道云笔记、印象笔记、石墨文档、WPS、百度网盘、夸克浏览器等</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇个人博客</title>
      <link href="/2020/03/14/myFirstBlog/"/>
      <url>/2020/03/14/myFirstBlog/</url>
      
        <content type="html"><![CDATA[<p>开启新的篇章</p><a id="more"></a><h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><blockquote><p>还记得两年前在SAU读大三的时候，我们老师在<strong>软件工程</strong>课上让我们在<a href="https://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a>上写Blog，教我们使用<code>Markdown</code>语法。通过写博客，我可以对自己的学习经历分享在网络上，同时也能够激励自己不断努力。</p><p>不久，在师兄的介绍下，我接触了<a href="https://github.com/" target="_blank" rel="noopener">Github</a>这个平台，它是一个<em>代码托管仓库</em>，可以把自己平时的项目保存在云端，十分便利。还有很多大佬的项目可以借鉴。</p><p>同时，Github也支持搭建个人博客，作为一个可自定义，能够记录自己进步，<del>摸鱼</del>生活的私人平台。</p></blockquote><p>今天，我正式成为一名Bloger，开始博客之旅。</p><h3 id="对博客的理解"><a href="#对博客的理解" class="headerlink" title="对博客的理解"></a>对博客的理解</h3><p>随着网络技术的不断进步，我们每个人的在网络上产生的数据越来越多，这些信息是我们在互联网上存在过的痕迹，值得我们认真对待。但是它们被分布在各个网站上，我们很难将它们聚合在一起，而且各个网站的信息排布方式也没有办法自由控制。因此，我们需要一个可以由自己主宰的空间——博客。</p><p>通过博客，我们可以记录自己的生活和成长的轨迹。它不像 Twitter 那样碎片化，也不像 Facebook 那样关系化，它是私人的空间。</p><p>喜欢写博客的人，有以下几种：</p><blockquote><p>刚接触Blog的小白，觉得很新鲜，试着选择一个免费空间来写。</p></blockquote><blockquote><p>有一段写博客经历，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</p></blockquote><blockquote><p>写了多年博客的资深博主，觉得独立博客的管理太麻烦，在保留控制权的前提下交给别人来管理，自己只负责写文章。</p></blockquote><h3 id="三行代码情书"><a href="#三行代码情书" class="headerlink" title="三行代码情书"></a>三行代码情书</h3><p>尚未理解，先码着吧。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int boy=<span class="number">1</span>,girl=<span class="number">0</span>;<span class="comment">//男孩是1，女孩是0</span></span><br><span class="line"><span class="keyword">while</span>(boy.Fall_In_Love(girl)))&#123;<span class="comment">//1爱上了0</span></span><br><span class="line">    boy.getBug(forever);<span class="comment">//从此男孩的的人生充满了这个女孩的Bug</span></span><br><span class="line">boy.Life(boy.concat(girl));<span class="comment">//但是男孩希望和女生连接成10这个代表完美的整数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
